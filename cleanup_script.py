#!/usr/bin/env python3
"""
Automated Cleanup Script for I3lani Bot
Generated by System Audit
"""

import os
import shutil
from pathlib import Path

def cleanup_system():
    """Execute system cleanup"""
    print("üßπ Starting system cleanup...")
    
    # Files to delete (duplicates)
    duplicates_to_delete = ['smart_pricing_display', 'smart_pricing_demo', 'frequency_pricing', 'price_management_system', 'test_comprehensive_price_management', 'pricing_system_check', 'dynamic_pricing', 'pricing_system_summary', 'pricing_admin_handlers', 'admin_system', 'pricing_integration_test', 'advanced_pricing_validation', 'worker', 'validate_memo_format', 'comprehensive_enhancement_test', 'animated_transaction_timeline', 'demo_animated_timeline_system', 'continuous_payment_scanner', 'immediate_os1497_fix', 'customer_service_resolution', 'manual_zz7832_activation', 'system_architecture_diagram', 'payment_amount_validator', 'automatic_payment_confirmation', 'clean_stars_payment_system', 'payment_memo_tracker']
    
    # Files to delete (useless)
    useless_to_delete = ['final_comprehensive_validation', 'comprehensive_sequence_validation', 'content_integrity_validation', 'comprehensive_bug_fixes_validation', 'admin_system_validation', 'test_advanced_channel_management', 'test_price_management_system', 'test_comprehensive_price_management', 'multilingual_validation', 'test_enhanced_detection', 'test_channel_detection_integration', 'test_channel_selection_fix', 'fix_channel_selection_validation', 'test_live_system_status', 'publishing_system_validation', 'admin_bot_test_system', 'advanced_pricing_validation', 'validate_memo_format', 'smart_pricing_demo', 'demo_enhanced_channel_selection', 'customer_service_resolution', 'campaign_handlers', 'content_integrity_validation', 'test_price_management_system', 'test_comprehensive_price_management', 'test_channel_selection_fix', 'fix_channel_selection_validation', 'pricing_system_check']
    
    # Files to keep (important)
    keep_systems = ['advanced_pricing_management', 'enhanced_ton_payment_monitoring']
    
    # Delete duplicate files
    for file_name in duplicates_to_delete:
        file_path = Path(f"{file_name}.py")
        if file_path.exists():
            print(f"   üóëÔ∏è Deleting duplicate: {file_path}")
            file_path.unlink()
    
    # Delete useless files
    for file_name in useless_to_delete:
        file_path = Path(f"{file_name}.py")
        if file_path.exists():
            print(f"   üóëÔ∏è Deleting useless: {file_path}")
            file_path.unlink()
    
    print("‚úÖ Cleanup completed")

if __name__ == "__main__":
    cleanup_system()
