"""
Test script for the debug system
"""
import asyncio
from debug_system import DebugSystem
from payments import payment_processor
from database import init_db, db
from config import BOT_TOKEN
from aiogram import Bot

async def test_debug_system():
    """Test all debug system components"""
    print("ðŸ§ª Testing I3lani Bot Debug System...")
    
    # Initialize components
    await init_db()
    bot = Bot(token=BOT_TOKEN)
    debug_system = DebugSystem(bot)
    
    # Test 1: User Activity Logging
    print("\n1. Testing user activity logging...")
    await debug_system.log_user_activity(123456, "test_action", {"test": "data"})
    print("âœ… User activity logged successfully")
    
    # Test 2: Error Logging
    print("\n2. Testing error logging...")
    test_error = Exception("Test error for debugging")
    await debug_system.log_error(test_error, {"context": "test"})
    print("âœ… Error logged successfully")
    
    # Test 3: Performance Tracking
    print("\n3. Testing performance tracking...")
    await debug_system.track_performance("test_operation", 0.5)
    print("âœ… Performance tracked successfully")
    
    # Test 4: System Health Check
    print("\n4. Testing system health check...")
    health = await debug_system.get_system_health()
    print(f"âœ… System health: {health['database_health']['status']}")
    
    # Test 5: Payment System Debug
    print("\n5. Testing payment system debug...")
    payment_debug = await debug_system.debug_payment_system()
    print(f"âœ… Payment system: {payment_debug['status']}")
    if payment_debug['status'] == 'healthy':
        print(f"   Sample memos: {payment_debug['test_memos'][:3]}")
    
    # Test 6: User Debug Info
    print("\n6. Testing user debug info...")
    user_debug = await debug_system.get_user_debug_info(123456)
    print(f"âœ… User debug info retrieved for user {user_debug['user_id']}")
    
    # Test 7: Generate Debug Report
    print("\n7. Testing debug report generation...")
    report = await debug_system.generate_debug_report()
    print("âœ… Debug report generated successfully")
    print(f"   Report length: {len(report)} characters")
    
    # Test 8: AB0102 Memo Format Validation
    print("\n8. Testing AB0102 memo format...")
    memos = [payment_processor.generate_memo() for _ in range(10)]
    all_valid = all(len(memo) == 6 and memo.isalnum() for memo in memos)
    print(f"âœ… AB0102 format validation: {'PASSED' if all_valid else 'FAILED'}")
    print(f"   Sample memos: {memos[:5]}")
    
    # Test 9: Database Health
    print("\n9. Testing database health...")
    db_health = await debug_system.check_database_health()
    print(f"âœ… Database health: {db_health['status']}")
    
    # Test 10: Debug Mode Toggle
    print("\n10. Testing debug mode toggle...")
    debug_mode = await debug_system.toggle_debug_mode()
    print(f"âœ… Debug mode: {'ON' if debug_mode else 'OFF'}")
    
    await bot.session.close()
    print("\nðŸŽ‰ All debug system tests completed successfully!")
    print("\nDebug System Features:")
    print("â€¢ User activity logging")
    print("â€¢ Comprehensive error tracking")
    print("â€¢ Performance monitoring")
    print("â€¢ System health checks")
    print("â€¢ Payment system debugging")
    print("â€¢ User debug information")
    print("â€¢ Automated debug reports")
    print("â€¢ AB0102 memo validation")
    print("â€¢ Database health monitoring")
    print("â€¢ Admin error notifications")
    
    print("\nAvailable Commands:")
    print("â€¢ /debug - User debug info")
    print("â€¢ /status - Bot status check")
    print("â€¢ /support - User support")
    print("â€¢ /help - Help information")
    print("â€¢ /debug_status - Admin debug status")
    print("â€¢ /debug_user <id> - Admin user debug")
    print("â€¢ /debug_toggle - Admin debug toggle")
    print("â€¢ /debug_clear - Admin clear logs")

if __name__ == "__main__":
    asyncio.run(test_debug_system())